// Code generated by genservices. DO NOT EDIT.
package organization

import (
	"context"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/pkg/endpoint/apierrors"
	"github.com/golangci/golangci-api/pkg/endpoint/endpointutil"
	"github.com/golangci/golangci-api/pkg/endpoint/request"
	"github.com/golangci/golangci-shared/pkg/logutil"
	"github.com/pkg/errors"
)

type UpdateRequest struct {
	Context  *request.OrgID
	Settings *SettingsWrapped
}

type UpdateResponse struct {
	err error
}

func makeUpdateEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(UpdateRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = UpdateResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = UpdateResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.Context.FillLogContext(rc.Lctx)
		req.Settings.FillLogContext(rc.Lctx)

		err = svc.Update(rc, req.Context, req.Settings)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("organization.Service.Update failed: %s", err)
			}
			return UpdateResponse{err}, nil
		}

		return UpdateResponse{nil}, nil

	}
}

type GetRequest struct {
	ReqOrg *request.OrgID
}

type GetResponse struct {
	err error
	*SettingsWrapped
}

func makeGetEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.ReqOrg.FillLogContext(rc.Lctx)

		v, err := svc.Get(rc, req.ReqOrg)
		if err != nil {
			rc.Log.Errorf("organization.Service.Get failed: %s", err)
			return GetResponse{err, v}, nil
		}

		return GetResponse{nil, v}, nil

	}
}

type ListRequest struct {
	ReqOrg *OrgListRequest
}

type ListResponse struct {
	err error
	*OrgList
}

func makeListEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(ListRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = ListResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = ListResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.ReqOrg.FillLogContext(rc.Lctx)

		v, err := svc.List(rc, req.ReqOrg)
		if err != nil {
			rc.Log.Errorf("organization.Service.List failed: %s", err)
			return ListResponse{err, v}, nil
		}

		return ListResponse{nil, v}, nil

	}
}
