// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set OrgSubQuerySet

// OrgSubQuerySet is an queryset type for OrgSub
type OrgSubQuerySet struct {
	db *gorm.DB
}

// NewOrgSubQuerySet constructs new OrgSubQuerySet
func NewOrgSubQuerySet(db *gorm.DB) OrgSubQuerySet {
	return OrgSubQuerySet{
		db: db.Model(&OrgSub{}),
	}
}

func (qs OrgSubQuerySet) w(db *gorm.DB) OrgSubQuerySet {
	return NewOrgSubQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) All(ret *[]OrgSub) error {
	return qs.db.Find(ret).Error
}

// BillingUserIDEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDEq(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id = ?", billingUserID))
}

// BillingUserIDGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDGt(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id > ?", billingUserID))
}

// BillingUserIDGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDGte(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id >= ?", billingUserID))
}

// BillingUserIDIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDIn(billingUserID ...uint) OrgSubQuerySet {
	if len(billingUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one billingUserID in BillingUserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("billing_user_id IN (?)", billingUserID))
}

// BillingUserIDLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDLt(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id < ?", billingUserID))
}

// BillingUserIDLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDLte(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id <= ?", billingUserID))
}

// BillingUserIDNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDNe(billingUserID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("billing_user_id != ?", billingUserID))
}

// BillingUserIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) BillingUserIDNotIn(billingUserID ...uint) OrgSubQuerySet {
	if len(billingUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one billingUserID in BillingUserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("billing_user_id NOT IN (?)", billingUserID))
}

// CommitStateEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CommitStateEq(commitState OrgSubCommitState) OrgSubQuerySet {
	return qs.w(qs.db.Where("commit_state = ?", commitState))
}

// CommitStateIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CommitStateIn(commitState ...OrgSubCommitState) OrgSubQuerySet {
	if len(commitState) == 0 {
		qs.db.AddError(errors.New("must at least pass one commitState in CommitStateIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("commit_state IN (?)", commitState))
}

// CommitStateNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CommitStateNe(commitState OrgSubCommitState) OrgSubQuerySet {
	return qs.w(qs.db.Where("commit_state != ?", commitState))
}

// CommitStateNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CommitStateNotIn(commitState ...OrgSubCommitState) OrgSubQuerySet {
	if len(commitState) == 0 {
		qs.db.AddError(errors.New("must at least pass one commitState in CommitStateNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("commit_state NOT IN (?)", commitState))
}

// Count is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *OrgSub) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtEq(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtGt(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtGte(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtLt(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtLte(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) CreatedAtNe(createdAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) Delete() error {
	return qs.db.Delete(OrgSub{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *OrgSub) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(OrgSub{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(OrgSub{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtEq(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtGt(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtGte(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtIsNotNull() OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtIsNull() OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtLt(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtLte(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) DeletedAtNe(deletedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) GetUpdater() OrgSubUpdater {
	return NewOrgSubUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDEq(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDGt(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDGte(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDIn(ID ...uint) OrgSubQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDLt(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDLte(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDNe(ID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IDNotIn(ID ...uint) OrgSubQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// IdempotencyKeyEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IdempotencyKeyEq(idempotencyKey string) OrgSubQuerySet {
	return qs.w(qs.db.Where("idempotency_key = ?", idempotencyKey))
}

// IdempotencyKeyIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IdempotencyKeyIn(idempotencyKey ...string) OrgSubQuerySet {
	if len(idempotencyKey) == 0 {
		qs.db.AddError(errors.New("must at least pass one idempotencyKey in IdempotencyKeyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("idempotency_key IN (?)", idempotencyKey))
}

// IdempotencyKeyNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IdempotencyKeyNe(idempotencyKey string) OrgSubQuerySet {
	return qs.w(qs.db.Where("idempotency_key != ?", idempotencyKey))
}

// IdempotencyKeyNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) IdempotencyKeyNotIn(idempotencyKey ...string) OrgSubQuerySet {
	if len(idempotencyKey) == 0 {
		qs.db.AddError(errors.New("must at least pass one idempotencyKey in IdempotencyKeyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("idempotency_key NOT IN (?)", idempotencyKey))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) Limit(limit int) OrgSubQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) Offset(offset int) OrgSubQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs OrgSubQuerySet) One(ret *OrgSub) error {
	return qs.db.First(ret).Error
}

// OrderAscByBillingUserID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByBillingUserID() OrgSubQuerySet {
	return qs.w(qs.db.Order("billing_user_id ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByCreatedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByDeletedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByID() OrgSubQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByOrgID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByOrgID() OrgSubQuerySet {
	return qs.w(qs.db.Order("org_id ASC"))
}

// OrderAscBySeatsCount is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscBySeatsCount() OrgSubQuerySet {
	return qs.w(qs.db.Order("seats_count ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderAscByUpdatedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByBillingUserID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByBillingUserID() OrgSubQuerySet {
	return qs.w(qs.db.Order("billing_user_id DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByCreatedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByDeletedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByID() OrgSubQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByOrgID is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByOrgID() OrgSubQuerySet {
	return qs.w(qs.db.Order("org_id DESC"))
}

// OrderDescBySeatsCount is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescBySeatsCount() OrgSubQuerySet {
	return qs.w(qs.db.Order("seats_count DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrderDescByUpdatedAt() OrgSubQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrgIDEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDEq(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id = ?", orgID))
}

// OrgIDGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDGt(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id > ?", orgID))
}

// OrgIDGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDGte(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id >= ?", orgID))
}

// OrgIDIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDIn(orgID ...uint) OrgSubQuerySet {
	if len(orgID) == 0 {
		qs.db.AddError(errors.New("must at least pass one orgID in OrgIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("org_id IN (?)", orgID))
}

// OrgIDLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDLt(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id < ?", orgID))
}

// OrgIDLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDLte(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id <= ?", orgID))
}

// OrgIDNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDNe(orgID uint) OrgSubQuerySet {
	return qs.w(qs.db.Where("org_id != ?", orgID))
}

// OrgIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) OrgIDNotIn(orgID ...uint) OrgSubQuerySet {
	if len(orgID) == 0 {
		qs.db.AddError(errors.New("must at least pass one orgID in OrgIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("org_id NOT IN (?)", orgID))
}

// PaymentGatewayCardTokenEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCardTokenEq(paymentGatewayCardToken string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_card_token = ?", paymentGatewayCardToken))
}

// PaymentGatewayCardTokenIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCardTokenIn(paymentGatewayCardToken ...string) OrgSubQuerySet {
	if len(paymentGatewayCardToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewayCardToken in PaymentGatewayCardTokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_card_token IN (?)", paymentGatewayCardToken))
}

// PaymentGatewayCardTokenNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCardTokenNe(paymentGatewayCardToken string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_card_token != ?", paymentGatewayCardToken))
}

// PaymentGatewayCardTokenNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCardTokenNotIn(paymentGatewayCardToken ...string) OrgSubQuerySet {
	if len(paymentGatewayCardToken) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewayCardToken in PaymentGatewayCardTokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_card_token NOT IN (?)", paymentGatewayCardToken))
}

// PaymentGatewayCustomerIDEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCustomerIDEq(paymentGatewayCustomerID string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_customer_id = ?", paymentGatewayCustomerID))
}

// PaymentGatewayCustomerIDIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCustomerIDIn(paymentGatewayCustomerID ...string) OrgSubQuerySet {
	if len(paymentGatewayCustomerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewayCustomerID in PaymentGatewayCustomerIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_customer_id IN (?)", paymentGatewayCustomerID))
}

// PaymentGatewayCustomerIDNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCustomerIDNe(paymentGatewayCustomerID string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_customer_id != ?", paymentGatewayCustomerID))
}

// PaymentGatewayCustomerIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewayCustomerIDNotIn(paymentGatewayCustomerID ...string) OrgSubQuerySet {
	if len(paymentGatewayCustomerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewayCustomerID in PaymentGatewayCustomerIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_customer_id NOT IN (?)", paymentGatewayCustomerID))
}

// PaymentGatewaySubscriptionIDEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewaySubscriptionIDEq(paymentGatewaySubscriptionID string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_subscription_id = ?", paymentGatewaySubscriptionID))
}

// PaymentGatewaySubscriptionIDIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewaySubscriptionIDIn(paymentGatewaySubscriptionID ...string) OrgSubQuerySet {
	if len(paymentGatewaySubscriptionID) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewaySubscriptionID in PaymentGatewaySubscriptionIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_subscription_id IN (?)", paymentGatewaySubscriptionID))
}

// PaymentGatewaySubscriptionIDNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewaySubscriptionIDNe(paymentGatewaySubscriptionID string) OrgSubQuerySet {
	return qs.w(qs.db.Where("payment_gateway_subscription_id != ?", paymentGatewaySubscriptionID))
}

// PaymentGatewaySubscriptionIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) PaymentGatewaySubscriptionIDNotIn(paymentGatewaySubscriptionID ...string) OrgSubQuerySet {
	if len(paymentGatewaySubscriptionID) == 0 {
		qs.db.AddError(errors.New("must at least pass one paymentGatewaySubscriptionID in PaymentGatewaySubscriptionIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("payment_gateway_subscription_id NOT IN (?)", paymentGatewaySubscriptionID))
}

// SeatsCountEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountEq(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count = ?", seatsCount))
}

// SeatsCountGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountGt(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count > ?", seatsCount))
}

// SeatsCountGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountGte(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count >= ?", seatsCount))
}

// SeatsCountIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountIn(seatsCount ...int) OrgSubQuerySet {
	if len(seatsCount) == 0 {
		qs.db.AddError(errors.New("must at least pass one seatsCount in SeatsCountIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("seats_count IN (?)", seatsCount))
}

// SeatsCountLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountLt(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count < ?", seatsCount))
}

// SeatsCountLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountLte(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count <= ?", seatsCount))
}

// SeatsCountNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountNe(seatsCount int) OrgSubQuerySet {
	return qs.w(qs.db.Where("seats_count != ?", seatsCount))
}

// SeatsCountNotIn is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) SeatsCountNotIn(seatsCount ...int) OrgSubQuerySet {
	if len(seatsCount) == 0 {
		qs.db.AddError(errors.New("must at least pass one seatsCount in SeatsCountNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("seats_count NOT IN (?)", seatsCount))
}

// SetBillingUserID is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetBillingUserID(billingUserID uint) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.BillingUserID)] = billingUserID
	return u
}

// SetCommitState is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetCommitState(commitState OrgSubCommitState) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.CommitState)] = commitState
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetCreatedAt(createdAt time.Time) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetDeletedAt(deletedAt *time.Time) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetID(ID uint) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.ID)] = ID
	return u
}

// SetIdempotencyKey is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetIdempotencyKey(idempotencyKey string) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.IdempotencyKey)] = idempotencyKey
	return u
}

// SetOrgID is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetOrgID(orgID uint) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.OrgID)] = orgID
	return u
}

// SetPaymentGatewayCardToken is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetPaymentGatewayCardToken(paymentGatewayCardToken string) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.PaymentGatewayCardToken)] = paymentGatewayCardToken
	return u
}

// SetPaymentGatewayCustomerID is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetPaymentGatewayCustomerID(paymentGatewayCustomerID string) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.PaymentGatewayCustomerID)] = paymentGatewayCustomerID
	return u
}

// SetPaymentGatewaySubscriptionID is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetPaymentGatewaySubscriptionID(paymentGatewaySubscriptionID string) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.PaymentGatewaySubscriptionID)] = paymentGatewaySubscriptionID
	return u
}

// SetSeatsCount is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetSeatsCount(seatsCount int) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.SeatsCount)] = seatsCount
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) SetUpdatedAt(updatedAt time.Time) OrgSubUpdater {
	u.fields[string(OrgSubDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u OrgSubUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtEq(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtGt(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtGte(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtLt(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtLte(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgSubQuerySet) UpdatedAtNe(updatedAt time.Time) OrgSubQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set OrgSubQuerySet

// ===== BEGIN of OrgSub modifiers

// OrgSubDBSchemaField describes database schema field. It requires for method 'Update'
type OrgSubDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f OrgSubDBSchemaField) String() string {
	return string(f)
}

// OrgSubDBSchema stores db field names of OrgSub
var OrgSubDBSchema = struct {
	ID                           OrgSubDBSchemaField
	CreatedAt                    OrgSubDBSchemaField
	UpdatedAt                    OrgSubDBSchemaField
	DeletedAt                    OrgSubDBSchemaField
	PaymentGatewayCardToken      OrgSubDBSchemaField
	PaymentGatewayCustomerID     OrgSubDBSchemaField
	PaymentGatewaySubscriptionID OrgSubDBSchemaField
	BillingUserID                OrgSubDBSchemaField
	OrgID                        OrgSubDBSchemaField
	SeatsCount                   OrgSubDBSchemaField
	CommitState                  OrgSubDBSchemaField
	IdempotencyKey               OrgSubDBSchemaField
}{

	ID:                           OrgSubDBSchemaField("id"),
	CreatedAt:                    OrgSubDBSchemaField("created_at"),
	UpdatedAt:                    OrgSubDBSchemaField("updated_at"),
	DeletedAt:                    OrgSubDBSchemaField("deleted_at"),
	PaymentGatewayCardToken:      OrgSubDBSchemaField("payment_gateway_card_token"),
	PaymentGatewayCustomerID:     OrgSubDBSchemaField("payment_gateway_customer_id"),
	PaymentGatewaySubscriptionID: OrgSubDBSchemaField("payment_gateway_subscription_id"),
	BillingUserID:                OrgSubDBSchemaField("billing_user_id"),
	OrgID:                        OrgSubDBSchemaField("org_id"),
	SeatsCount:                   OrgSubDBSchemaField("seats_count"),
	CommitState:                  OrgSubDBSchemaField("commit_state"),
	IdempotencyKey:               OrgSubDBSchemaField("idempotency_key"),
}

// Update updates OrgSub fields by primary key
// nolint: dupl
func (o *OrgSub) Update(db *gorm.DB, fields ...OrgSubDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                              o.ID,
		"created_at":                      o.CreatedAt,
		"updated_at":                      o.UpdatedAt,
		"deleted_at":                      o.DeletedAt,
		"payment_gateway_card_token":      o.PaymentGatewayCardToken,
		"payment_gateway_customer_id":     o.PaymentGatewayCustomerID,
		"payment_gateway_subscription_id": o.PaymentGatewaySubscriptionID,
		"billing_user_id":                 o.BillingUserID,
		"org_id":                          o.OrgID,
		"seats_count":                     o.SeatsCount,
		"commit_state":                    o.CommitState,
		"idempotency_key":                 o.IdempotencyKey,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update OrgSub %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// OrgSubUpdater is an OrgSub updates manager
type OrgSubUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewOrgSubUpdater creates new OrgSub updater
// nolint: dupl
func NewOrgSubUpdater(db *gorm.DB) OrgSubUpdater {
	return OrgSubUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&OrgSub{}),
	}
}

// ===== END of OrgSub modifiers

// ===== END of all query sets
