// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set OrgQuerySet

// OrgQuerySet is an queryset type for Org
type OrgQuerySet struct {
	db *gorm.DB
}

// NewOrgQuerySet constructs new OrgQuerySet
func NewOrgQuerySet(db *gorm.DB) OrgQuerySet {
	return OrgQuerySet{
		db: db.Model(&Org{}),
	}
}

func (qs OrgQuerySet) w(db *gorm.DB) OrgQuerySet {
	return NewOrgQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) All(ret *[]Org) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Org) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtEq(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtGt(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtGte(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtLt(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtLte(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) CreatedAtNe(createdAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) Delete() error {
	return qs.db.Delete(Org{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Org) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Org{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Org{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtEq(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtGt(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtGte(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtIsNotNull() OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtIsNull() OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtLt(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtLte(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DeletedAtNe(deletedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DisplayNameEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DisplayNameEq(displayName string) OrgQuerySet {
	return qs.w(qs.db.Where("display_name = ?", displayName))
}

// DisplayNameIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DisplayNameIn(displayName ...string) OrgQuerySet {
	if len(displayName) == 0 {
		qs.db.AddError(errors.New("must at least pass one displayName in DisplayNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("display_name IN (?)", displayName))
}

// DisplayNameNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DisplayNameNe(displayName string) OrgQuerySet {
	return qs.w(qs.db.Where("display_name != ?", displayName))
}

// DisplayNameNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) DisplayNameNotIn(displayName ...string) OrgQuerySet {
	if len(displayName) == 0 {
		qs.db.AddError(errors.New("must at least pass one displayName in DisplayNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("display_name NOT IN (?)", displayName))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) GetUpdater() OrgUpdater {
	return NewOrgUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDEq(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDGt(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDGte(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDIn(ID ...uint) OrgQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDLt(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDLte(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDNe(ID uint) OrgQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) IDNotIn(ID ...uint) OrgQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) Limit(limit int) OrgQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) NameEq(name string) OrgQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) NameIn(name ...string) OrgQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) NameNe(name string) OrgQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) NameNotIn(name ...string) OrgQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) Offset(offset int) OrgQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs OrgQuerySet) One(ret *Org) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByCreatedAt() OrgQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByDeletedAt() OrgQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByID() OrgQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByProviderID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByProviderID() OrgQuerySet {
	return qs.w(qs.db.Order("provider_id ASC"))
}

// OrderAscByProviderPersonalUserID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByProviderPersonalUserID() OrgQuerySet {
	return qs.w(qs.db.Order("provider_personal_user_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderAscByUpdatedAt() OrgQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByCreatedAt() OrgQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByDeletedAt() OrgQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByID() OrgQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByProviderID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByProviderID() OrgQuerySet {
	return qs.w(qs.db.Order("provider_id DESC"))
}

// OrderDescByProviderPersonalUserID is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByProviderPersonalUserID() OrgQuerySet {
	return qs.w(qs.db.Order("provider_personal_user_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) OrderDescByUpdatedAt() OrgQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// ProviderEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderEq(provider string) OrgQuerySet {
	return qs.w(qs.db.Where("provider = ?", provider))
}

// ProviderIDEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDEq(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id = ?", providerID))
}

// ProviderIDGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDGt(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id > ?", providerID))
}

// ProviderIDGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDGte(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id >= ?", providerID))
}

// ProviderIDIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDIn(providerID ...int) OrgQuerySet {
	if len(providerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerID in ProviderIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_id IN (?)", providerID))
}

// ProviderIDLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDLt(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id < ?", providerID))
}

// ProviderIDLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDLte(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id <= ?", providerID))
}

// ProviderIDNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDNe(providerID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_id != ?", providerID))
}

// ProviderIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIDNotIn(providerID ...int) OrgQuerySet {
	if len(providerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerID in ProviderIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_id NOT IN (?)", providerID))
}

// ProviderIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderIn(provider ...string) OrgQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider IN (?)", provider))
}

// ProviderNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderNe(provider string) OrgQuerySet {
	return qs.w(qs.db.Where("provider != ?", provider))
}

// ProviderNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderNotIn(provider ...string) OrgQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider NOT IN (?)", provider))
}

// ProviderPersonalUserIDEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDEq(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id = ?", providerPersonalUserID))
}

// ProviderPersonalUserIDGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDGt(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id > ?", providerPersonalUserID))
}

// ProviderPersonalUserIDGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDGte(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id >= ?", providerPersonalUserID))
}

// ProviderPersonalUserIDIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDIn(providerPersonalUserID ...int) OrgQuerySet {
	if len(providerPersonalUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerPersonalUserID in ProviderPersonalUserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_personal_user_id IN (?)", providerPersonalUserID))
}

// ProviderPersonalUserIDLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDLt(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id < ?", providerPersonalUserID))
}

// ProviderPersonalUserIDLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDLte(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id <= ?", providerPersonalUserID))
}

// ProviderPersonalUserIDNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDNe(providerPersonalUserID int) OrgQuerySet {
	return qs.w(qs.db.Where("provider_personal_user_id != ?", providerPersonalUserID))
}

// ProviderPersonalUserIDNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) ProviderPersonalUserIDNotIn(providerPersonalUserID ...int) OrgQuerySet {
	if len(providerPersonalUserID) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerPersonalUserID in ProviderPersonalUserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_personal_user_id NOT IN (?)", providerPersonalUserID))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetCreatedAt(createdAt time.Time) OrgUpdater {
	u.fields[string(OrgDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetDeletedAt(deletedAt *time.Time) OrgUpdater {
	u.fields[string(OrgDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDisplayName is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetDisplayName(displayName string) OrgUpdater {
	u.fields[string(OrgDBSchema.DisplayName)] = displayName
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetID(ID uint) OrgUpdater {
	u.fields[string(OrgDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetName(name string) OrgUpdater {
	u.fields[string(OrgDBSchema.Name)] = name
	return u
}

// SetProvider is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetProvider(provider string) OrgUpdater {
	u.fields[string(OrgDBSchema.Provider)] = provider
	return u
}

// SetProviderID is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetProviderID(providerID int) OrgUpdater {
	u.fields[string(OrgDBSchema.ProviderID)] = providerID
	return u
}

// SetProviderPersonalUserID is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetProviderPersonalUserID(providerPersonalUserID int) OrgUpdater {
	u.fields[string(OrgDBSchema.ProviderPersonalUserID)] = providerPersonalUserID
	return u
}

// SetSettings is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetSettings(settings []byte) OrgUpdater {
	u.fields[string(OrgDBSchema.Settings)] = settings
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u OrgUpdater) SetUpdatedAt(updatedAt time.Time) OrgUpdater {
	u.fields[string(OrgDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SettingsEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) SettingsEq(settings []byte) OrgQuerySet {
	return qs.w(qs.db.Where("settings = ?", settings))
}

// SettingsIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) SettingsIn(settings ...[]byte) OrgQuerySet {
	if len(settings) == 0 {
		qs.db.AddError(errors.New("must at least pass one settings in SettingsIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("settings IN (?)", settings))
}

// SettingsNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) SettingsNe(settings []byte) OrgQuerySet {
	return qs.w(qs.db.Where("settings != ?", settings))
}

// SettingsNotIn is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) SettingsNotIn(settings ...[]byte) OrgQuerySet {
	if len(settings) == 0 {
		qs.db.AddError(errors.New("must at least pass one settings in SettingsNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("settings NOT IN (?)", settings))
}

// Update is an autogenerated method
// nolint: dupl
func (u OrgUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u OrgUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtEq(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtGt(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtGte(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtLt(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtLte(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs OrgQuerySet) UpdatedAtNe(updatedAt time.Time) OrgQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set OrgQuerySet

// ===== BEGIN of Org modifiers

// OrgDBSchemaField describes database schema field. It requires for method 'Update'
type OrgDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f OrgDBSchemaField) String() string {
	return string(f)
}

// OrgDBSchema stores db field names of Org
var OrgDBSchema = struct {
	ID                     OrgDBSchemaField
	CreatedAt              OrgDBSchemaField
	UpdatedAt              OrgDBSchemaField
	DeletedAt              OrgDBSchemaField
	Name                   OrgDBSchemaField
	DisplayName            OrgDBSchemaField
	Provider               OrgDBSchemaField
	ProviderID             OrgDBSchemaField
	ProviderPersonalUserID OrgDBSchemaField
	Settings               OrgDBSchemaField
}{

	ID:                     OrgDBSchemaField("id"),
	CreatedAt:              OrgDBSchemaField("created_at"),
	UpdatedAt:              OrgDBSchemaField("updated_at"),
	DeletedAt:              OrgDBSchemaField("deleted_at"),
	Name:                   OrgDBSchemaField("name"),
	DisplayName:            OrgDBSchemaField("display_name"),
	Provider:               OrgDBSchemaField("provider"),
	ProviderID:             OrgDBSchemaField("provider_id"),
	ProviderPersonalUserID: OrgDBSchemaField("provider_personal_user_id"),
	Settings:               OrgDBSchemaField("settings"),
}

// Update updates Org fields by primary key
// nolint: dupl
func (o *Org) Update(db *gorm.DB, fields ...OrgDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                        o.ID,
		"created_at":                o.CreatedAt,
		"updated_at":                o.UpdatedAt,
		"deleted_at":                o.DeletedAt,
		"name":                      o.Name,
		"display_name":              o.DisplayName,
		"provider":                  o.Provider,
		"provider_id":               o.ProviderID,
		"provider_personal_user_id": o.ProviderPersonalUserID,
		"settings":                  o.Settings,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Org %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// OrgUpdater is an Org updates manager
type OrgUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewOrgUpdater creates new Org updater
// nolint: dupl
func NewOrgUpdater(db *gorm.DB) OrgUpdater {
	return OrgUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Org{}),
	}
}

// ===== END of Org modifiers

// ===== END of all query sets
